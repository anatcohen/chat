{"version":3,"sources":["Redux/Actions.js","LogIn.js","Message.js","ChatRoom.js","App.js","serviceWorker.js","Redux/Reducers.js","Redux/Store.js","index.js"],"names":["SET_SELF","SET_USERS","REMOVE_USER","ADD_MESSAGES","DELETE_MESSAGES","setSelf","name","id","type","addMessages","message","getUsers","dispatch","getState","addMessageListener","firebase","ref","on","snapshot","arrUsers","val","Object","entries","value","push","users","self","length","lastUser","list","findIndex","user","content","data","setTimeout","off","deleteAllMessages","window","location","href","remove","LogIn","props","useState","isUnique","setUnique","useEffect","document","getElementById","focus","autoComplete","className","onChange","e","currentTarget","bIsUnique","filter","style","visibility","placeholder","to","onClick","addSelfToDataBase","Message","userName","sameUser","timeStamp","ChatRoom","map","deleteSelf","messages","mes","index","toUpperCase","key","onSubmit","preventDefault","messageBox","sendMessage","Date","getHours","getMinutes","connect","state","String","now","set","onDisconnect","actions","exact","path","render","routeProps","Boolean","hostname","match","INITIAL_USERS_STATE","INITIAL_MESSAGES_STATE","combineReducers","action","createStore","rootReducer","applyMiddleware","thunk","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","store","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b434a02f.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\n\r\nexport const SET_SELF = 'SET_SELF';\r\nexport const SET_USERS = 'SET_USERS';\r\nexport const REMOVE_USER = 'REMOVE_USER';\r\nexport const ADD_MESSAGES = 'ADD_MESSAGES';\r\nexport const DELETE_MESSAGES = 'DELETE_MESSAGES';\r\n\r\nfunction setSelf(name = '', id = '') {\r\n    return { type: SET_SELF, name, id }\r\n}\r\n\r\nfunction setUsers(list) {\r\n    return { type: SET_USERS, list }\r\n}\r\n\r\nfunction deleteUser(name) {\r\n    return { type: REMOVE_USER, name }\r\n}\r\n\r\nfunction addMessages(message) {\r\n    return { type: ADD_MESSAGES, message }\r\n}\r\n\r\nfunction deleteMessages() {\r\n    return { type: DELETE_MESSAGES }\r\n}\r\n\r\n// Adds user to db\r\nexport function addSelfToDataBase(name) {\r\n    return dispatch => {\r\n        let id = String(Date.now());\r\n        dispatch(setSelf(name, id))\r\n        // Adds name to db and to reducer\r\n        firebase.database().ref(`users/${id}`).set({ name }, () => dispatch(setSelf(name, id)));\r\n        // When connection to db disconnects\r\n        firebase.database().ref(`users/${id}`).onDisconnect().remove();\r\n\r\n    }\r\n}\r\n\r\n// Gets list of users from database\r\nexport function getUsers() {\r\n    return (dispatch, getState) => {\r\n        // Creates message listener\r\n        dispatch(addMessageListener());\r\n        // Creates user listener\r\n        firebase.database().ref('users').on('value', function (snapshot) {\r\n            let arrUsers = [];\r\n\r\n            if (snapshot.val() != null) {\r\n                for (let [id, value] of Object.entries(snapshot.val())) {\r\n                    arrUsers.push({ 'name': value.name, id })\r\n                }\r\n            }\r\n\r\n            // Creates 'new user joined' message \r\n            if (getState().users.self.name !== '' && arrUsers.length) {\r\n                let lastUser = arrUsers[arrUsers.length - 1].name;\r\n                // Checks if last user in db list is actually a new user \r\n                if (getState().users.list.findIndex(user => user.name === lastUser) === -1) {\r\n                    let user = (lastUser === getState().users.self.name) ? 'YOU HAVE' : lastUser + ' HAS';\r\n                    dispatch(addMessages({ type: 'userJoined', user, content: 'JOINED THE CHAT' }))\r\n                }\r\n            }\r\n            // Adds users to redux\r\n            dispatch(setUsers(arrUsers));\r\n        });\r\n\r\n        // Creates listener for deleted users- users thats have logged off\r\n        firebase.database().ref('users').on('child_removed', function (data) {\r\n            // Disconnection\r\n            if (data.val().name === getState().users.self.name) {\r\n                dispatch(addMessages({ type: 'userLeft', user: '', content: 'YOU HAVE DISCONNECTED FROM THE CHAT' }));\r\n                // Directs web back to log in page\r\n                setTimeout(() => {\r\n                    firebase.database().ref('users').off();\r\n                    dispatch(deleteAllMessages());\r\n                    // window.location.href = 'http://localhost:3000/ChatRoom/';\r\n                    window.location.href = 'https://anatcohen.github.io/ChatRoom/';\r\n                }, 2500);\r\n            }\r\n            // Different user logged off\r\n            else\r\n                dispatch(addMessages({ type: 'userLeft', user: data.val().name, content: 'HAS LEFT THE CHAT' }));\r\n        });\r\n    }\r\n}\r\n\r\n// Deletes user from db\r\nexport function deleteSelf(id) {\r\n    return dispatch => {\r\n        // Deletes user and removes listeners\r\n        firebase.database().ref(`users/${id}`).remove();\r\n        firebase.database().ref('users').off();\r\n        dispatch(setSelf());\r\n        // Deletes messages \r\n        dispatch(deleteAllMessages());\r\n    }\r\n}\r\n\r\n// Adds message to db\r\nexport function addMessageToDataBase(content, timeStamp, user) {\r\n    return dispatch => {\r\n        firebase.database().ref('chat').push().set({ type: 'message', content, timeStamp, user });\r\n    }\r\n}\r\n\r\n// Gets messages from db and adds sends them to the reducer\r\nexport function addMessageListener(user) {\r\n    return (dispatch, getState) => {\r\n        firebase.database().ref('chat').on('child_added', function (data) {\r\n            // Adds messages only sent after log in to redux\r\n            if (getState().users.self.name) dispatch(addMessages(data.val()));\r\n        })\r\n    }\r\n}\r\n\r\n// Deletes message thread from just local storage or from db too\r\nfunction deleteAllMessages() {\r\n    return (dispatch, getState) => {\r\n        // Deletes messages from local storageand removes listener\r\n        dispatch(deleteMessages());\r\n        firebase.database().ref('chat').off();\r\n        // Deletes messages from database\r\n        if (!getState().users.list.length)\r\n            firebase.database().ref(`chat`).remove();\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function LogIn(props) {\r\n    const [isUnique, setUnique] = useState(false),\r\n        // Displays enter button and name error if needed\r\n        onTextChange = e => {\r\n            let name = e.currentTarget.value, bIsUnique = !props.users.list.filter(user => user.name === name).length;\r\n            setUnique(bIsUnique && name.length !== 0);\r\n            document.getElementById('nameAlert').style.visibility = (!bIsUnique && name.length) ? 'visible' : 'hidden';\r\n        },\r\n        // On enter button click\r\n        onEnterClick = () => {\r\n            props.addSelfToDataBase(document.getElementById('name').value);\r\n        };\r\n\r\n    useEffect(() => {\r\n        document.getElementById('name').focus();\r\n        props.getUsers();\r\n    }, []);\r\n\r\n    return (\r\n        <div id='logIn'>\r\n            <div id='leftPanel'>\r\n                <h1>Chat Room</h1>\r\n                <p>{props.users.list.length} USERS ONLINE</p>\r\n            </div>\r\n            <div id='rightPanel'>\r\n                <form autoComplete='off'>\r\n                    <h2>Enter Chat Room:</h2>\r\n                    <div className='textbox-logo'>\r\n                        <input onChange={onTextChange} type='text' id='name' placeholder='Enter nickname' />\r\n                        {isUnique && <Link to='/room'> <button id='enterBtn' onClick={onEnterClick} /></Link>}\r\n                    </div>\r\n                    <p id='nameAlert' style={{ visibility: 'hidden' }}>USERNAME HAS ALREADY BEEN TAKEN</p>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport default function Message(props) {\r\n    return (\r\n        <div id={props.userName === 'YOU' ? 'selfMessage' : 'userMessage'}>\r\n            <p id='userName'>{!props.sameUser && props.userName}</p>\r\n            <div>\r\n                <p>{props.message.timeStamp}</p>\r\n                <h3>{props.message.content}</h3>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Message from './Message';\r\n\r\nexport default function ChatRoom(props) {\r\n    // Sends message\r\n    const onMessageSubmit = e => {\r\n        e.preventDefault();\r\n        let messageBox = document.getElementById('messageBox');\r\n        // If message has content\r\n        if (messageBox.value.length) {\r\n            props.sendMessage(messageBox.value, `${new Date().getHours()}:${new Date().getMinutes()}`, props.users.self.name);\r\n            messageBox.value = '';\r\n        }\r\n    },\r\n        // Checks if a message has been typed\r\n        onMessageChange = e => {\r\n            document.getElementById('sendBtn').style.visibility = e.currentTarget.value.length ? 'visible' : 'hidden';\r\n        };\r\n\r\n    useEffect(() => document.getElementById('messageBox').focus())\r\n\r\n    return (\r\n        <div id='chatRoom'>\r\n            <header>\r\n                <p><span>•</span> You{props.users.list.filter(user => user.name !== props.users.self.name).map(value => { return `, ${value.name} ` })}</p>\r\n                <Link to='/ChatRoom/' onClick={() => props.deleteSelf(props.users.self.id)}><button /></Link>\r\n            </header>\r\n            <div id='chatBody'>\r\n                {props.messages.list.map((mes, index) => {\r\n                    // Checks who sent message and if previous message was sent by same user\r\n                    let userName = (mes.user === props.users.self.name) ? 'YOU' : mes.user.toUpperCase(),\r\n                        sameUser = (index > 1) ? (props.messages.list[index - 1].user === mes.user) : false;\r\n\r\n                    return mes.type === 'message' ?\r\n                        <Message key={index} message={mes} userName={userName} sameUser={sameUser} /> :\r\n                        <p key={index} id='newUser'>{`${userName} ${mes.content}`}</p>\r\n                })}\r\n            </div>\r\n            <footer>\r\n                <form onSubmit={onMessageSubmit} autoComplete='off'>\r\n                    <input type='text' onChange={onMessageChange} placeholder='Enter message' id='messageBox' />\r\n                    <button id='sendBtn' />\r\n                </form>\r\n            </footer>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actions from './Redux/Actions';\nimport './App.sass';\nimport LogIn from './LogIn';\nimport ChatRoom from './ChatRoom';\n\nfunction App(props) {\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/ChatRoom/\" render={(routeProps) => <LogIn {...routeProps} {...props} />} />\n        <Route exact path=\"/room\" render={(routeProps) => <ChatRoom {...routeProps} {...props} />} />\n      </Switch>\n    </>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    users: state.users,\n    messages: state.messages\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addSelfToDataBase: name => { dispatch(actions.addSelfToDataBase(name)) },\n    getUsers: () => { dispatch(actions.getUsers()) },\n    deleteSelf: id => { dispatch(actions.deleteSelf(id)) },\n    addMessageListener: () => { dispatch(actions.addMessageListener()) },\n    sendMessage: (content, timeStamp, user) => { dispatch(actions.addMessageToDataBase(content, timeStamp, user)) }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actions from './Actions';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst INITIAL_USERS_STATE = { self: { name: '', id: '' }, list: [] }\r\nconst INITIAL_MESSAGES_STATE = { list: [] }\r\n\r\nfunction usersReducer(state = INITIAL_USERS_STATE, action) {\r\n    switch (action.type) {\r\n        case actions.SET_SELF:\r\n            return { ...state, self: { name: action.name, id: action.id } }\r\n        case actions.SET_USERS:\r\n            return { ...state, list: action.list };\r\n        case actions.REMOVE_USER:\r\n            return { ...state, list: state.list.filter(user => user.name !== action.name) }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction messagesReducer(state = INITIAL_MESSAGES_STATE, action) {\r\n    switch (action.type) {\r\n        case actions.ADD_MESSAGES:\r\n            return { list: [...state.list, action.message] }\r\n        case actions.DELETE_MESSAGES:\r\n            return INITIAL_MESSAGES_STATE;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    users: usersReducer,\r\n    messages: messagesReducer\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './Reducers';\r\n\r\nexport default createStore(rootReducer, applyMiddleware(thunk));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as firebase from 'firebase';\nimport { Provider } from 'react-redux';\nimport store from './Redux/Store';\n\nconst config = {\n    apiKey: \"AIzaSyDlr7lzC7eunsm6NtcTV2bfXLhfM618fz0\",\n    authDomain: \"chatroom-2eb3f.firebaseapp.com\",\n    databaseURL: \"https://chatroom-2eb3f.firebaseio.com\",\n    projectId: \"chatroom-2eb3f\",\n    storageBucket: \"chatroom-2eb3f.appspot.com\",\n    messagingSenderId: \"398638027058\",\n    appId: \"1:398638027058:web:d52c3e41f6f8a75421472b\",\n    measurementId: \"G-HEE2T4312L\"\n};\n\nfirebase.initializeApp(config);\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}